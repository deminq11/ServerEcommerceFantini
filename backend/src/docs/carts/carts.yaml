info:
  title: Carts
  version: 1.0.0
tags:
  - name: Carts
paths:
  /api/carts:
    post:
      summary: Create a new cart (User or Admin).
      tags: [Carts]
      security:
        - cookieAuth: []
      responses:
        '201':
          description: Cart created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
            description: Unauthorized.
        '403':
            description: Forbidden.
  /api/carts/{cid}:
    get:
      summary: Get a cart by ID (User or Admin).
      tags: [Carts]
      security:
        - cookieAuth: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cart found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart not found.
        '401':
            description: Unauthorized.
        '403':
            description: Forbidden.
    put:
      summary: Update a cart (User or Admin).
      tags: [Carts]
      security:
        - cookieAuth: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                    _id:
                        type: string
                    quantity:
                        type: integer
      responses:
        '200':
          description: Cart updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart not found.
        '400':
          description: Bad request.
        '401':
            description: Unauthorized.
        '403':
            description: Forbidden.
    delete:
      summary: Empty a cart (User or Admin).
      tags: [Carts]
      security:
        - cookieAuth: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cart emptied successfully.
        '404':
          description: Cart not found.
        '401':
            description: Unauthorized.
        '403':
            description: Forbidden.
  /api/carts/destroy/{cid}:
    delete:
      summary: Delete a cart (Admin only).
      tags: [Carts]
      security:
        - cookieAuth: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cart deleted successfully.
        '404':
          description: Cart not found.
        '401':
            description: Unauthorized.
        '403':
            description: Forbidden.
  /api/carts/{cid}/products/{pid}:
    post:
      summary: Add a product to a cart (User or Admin).
      tags: [Carts]
      security:
        - cookieAuth: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
        - name: pid
          in: path
          required: true
          schema:
            type: string
        - name: quantity
          in: query
          schema:
            type: integer
          description: Quantity of the product to add.
      responses:
        '200':
          description: Product added to cart successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart or product not found.
        '401':
            description: Unauthorized.
        '403':
            description: Forbidden.
    put:
      summary: Update product quantity in a cart (User or Admin).
      tags: [Carts]
      security:
        - cookieAuth: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
        - name: pid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Product quantity updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart or product not found.
        '400':
          description: Bad request.
        '401':
            description: Unauthorized.
        '403':
            description: Forbidden.
    delete:
      summary: Delete a product from a cart (User or Admin).
      tags: [Carts]
      security:
        - cookieAuth: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            type: string
        - name: pid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted from cart successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart or product not found.
        '400':
          description: Bad request.
        '401':
            description: Unauthorized.
        '403':
            description: Forbidden.
components:
  schemas:
    CartProduct:
      type: object
      properties:
        product:
          type: string
          description: Product ID (reference to products collection).
        quantity:
          type: integer
          description: Quantity of the product in the cart.
      required:
        - product
        - quantity
    Cart:
      type: object
      properties:
        user_id:
          type: string
          description: User ID (reference to users collection).
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartProduct'
        state:
          type: string
          enum:
            - reserved
            - paid
            - delivered
          default: reserved
          description: Cart state.
      required:
        - user_id
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token